int N::operator-(int a1, int a2)
{
  return *(_DWORD *)(a1 + 104) - *(_DWORD *)(a2 + 104);
}

int N::operator+(int a1, int a2)
{
  return *(_DWORD *)(a1 + 104) + *(_DWORD *)(a2 + 104);
}

int N::setAnnotation(N *this, char *a2)
{
  int v2;

  v2 = strlen(a2);
  return memcpy((char *)this + 4, a2, v2);
}

void N::N(N *this, int a2)
{
  *(_DWORD *)this = off_8048848;
  *((_DWORD *)this + 26) = a2;
}

int main(int argc, const char **argv, const char **envp)
{
  N *N1;
  N *N3;
  N *N2;

  if ( argc <= 1 )
    _exit(1);
  N1 = (N *)operator new(108u);
  N::N(N1, 5);
  N2 = N1;
  N3 = (N *)operator new(108u);
  N::N(N3, 6);
  N::setAnnotation(N2, (char *)argv[1]);
  return (**(int (__cdecl ***)(N *, N *))N3)(N3, N2);
}