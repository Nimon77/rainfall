class N {
  public:
    int nb;
    int (N::*func)(N &);
    char annotation[100];

    N(int val) : nb(val)
    {
      this->func = &N::operator+;
    }
    int operator+(N &arg)
    {
      return this->nb + arg.nb;
    }
    int operator-(N &arg)
    {
      return this->nb - arg.nb;
    }
    void setAnnotation(char *str)
    {
      memcpy(this->annotation, str, strlen(str));
    }
};

int		main(int ac, char **av)
{
	if (ac < 1)
		_exit(1);

	N *N1 = new N(5);
	N *N2 = new N(6);

	N1->setAnnotation(av[1]);
	return (N2->*(N2->func))(*N1);
}